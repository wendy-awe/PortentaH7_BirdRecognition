
tryerblinking_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cdc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000f74  08000f74  00001f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f84  08000f84  00002010  2**0
                  CONTENTS
  4 .ARM          00000000  08000f84  08000f84  00002010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f84  08000f84  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f84  08000f84  00001f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f88  08000f88  00001f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08000f8c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  24000010  08000f9c  00002010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000030  08000f9c  00002030  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d09  00000000  00000000  0000203e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ee1  00000000  00000000  00007d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000500  00000000  00000000  00008c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003a4  00000000  00000000  00009128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cbc8  00000000  00000000  000094cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000065c3  00000000  00000000  00046094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018b6d2  00000000  00000000  0004c657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d7d29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001284  00000000  00000000  001d7d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001d8ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08000f5c 	.word	0x08000f5c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08000f5c 	.word	0x08000f5c

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	@ (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	@ (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	@ (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <main>:
#include "stm32h7xx_hal.h"

int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
    // Initialize HAL library
    HAL_Init();
 800040a:	f000 f8a5 	bl	8000558 <HAL_Init>

    // Enable GPIOC clock
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800040e:	4b16      	ldr	r3, [pc, #88]	@ (8000468 <main+0x64>)
 8000410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000414:	4a14      	ldr	r2, [pc, #80]	@ (8000468 <main+0x64>)
 8000416:	f043 0304 	orr.w	r3, r3, #4
 800041a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800041e:	4b12      	ldr	r3, [pc, #72]	@ (8000468 <main+0x64>)
 8000420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000424:	f003 0304 	and.w	r3, r3, #4
 8000428:	603b      	str	r3, [r7, #0]
 800042a:	683b      	ldr	r3, [r7, #0]

    // Configure PC7 as output
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800043a:	2380      	movs	r3, #128	@ 0x80
 800043c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043e:	2301      	movs	r3, #1
 8000440:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000446:	2300      	movs	r3, #0
 8000448:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	4619      	mov	r1, r3
 800044e:	4807      	ldr	r0, [pc, #28]	@ (800046c <main+0x68>)
 8000450:	f000 fa1c 	bl	800088c <HAL_GPIO_Init>

    // Main loop
    while (1)
    {
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); // Toggle LED
 8000454:	2180      	movs	r1, #128	@ 0x80
 8000456:	4805      	ldr	r0, [pc, #20]	@ (800046c <main+0x68>)
 8000458:	f000 fbc8 	bl	8000bec <HAL_GPIO_TogglePin>
        HAL_Delay(500);                        // 500 ms delay
 800045c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000460:	f000 f90c 	bl	800067c <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); // Toggle LED
 8000464:	bf00      	nop
 8000466:	e7f5      	b.n	8000454 <main+0x50>
 8000468:	58024400 	.word	0x58024400
 800046c:	58020800 	.word	0x58020800

08000470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000476:	4b0a      	ldr	r3, [pc, #40]	@ (80004a0 <HAL_MspInit+0x30>)
 8000478:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800047c:	4a08      	ldr	r2, [pc, #32]	@ (80004a0 <HAL_MspInit+0x30>)
 800047e:	f043 0302 	orr.w	r3, r3, #2
 8000482:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000486:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <HAL_MspInit+0x30>)
 8000488:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800048c:	f003 0302 	and.w	r3, r3, #2
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	58024400 	.word	0x58024400

080004a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004a8:	bf00      	nop
 80004aa:	e7fd      	b.n	80004a8 <NMI_Handler+0x4>

080004ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b0:	bf00      	nop
 80004b2:	e7fd      	b.n	80004b0 <HardFault_Handler+0x4>

080004b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b8:	bf00      	nop
 80004ba:	e7fd      	b.n	80004b8 <MemManage_Handler+0x4>

080004bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <BusFault_Handler+0x4>

080004c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <UsageFault_Handler+0x4>

080004cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr

080004f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004fa:	f000 f89f 	bl	800063c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000504:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800053c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000508:	f7ff fee6 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800050c:	480c      	ldr	r0, [pc, #48]	@ (8000540 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800050e:	490d      	ldr	r1, [pc, #52]	@ (8000544 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000510:	4a0d      	ldr	r2, [pc, #52]	@ (8000548 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000514:	e002      	b.n	800051c <LoopCopyDataInit>

08000516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051a:	3304      	adds	r3, #4

0800051c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800051c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000520:	d3f9      	bcc.n	8000516 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000522:	4a0a      	ldr	r2, [pc, #40]	@ (800054c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000524:	4c0a      	ldr	r4, [pc, #40]	@ (8000550 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000528:	e001      	b.n	800052e <LoopFillZerobss>

0800052a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800052c:	3204      	adds	r2, #4

0800052e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000530:	d3fb      	bcc.n	800052a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000532:	f000 fcef 	bl	8000f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000536:	f7ff ff65 	bl	8000404 <main>
  bx  lr
 800053a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800053c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000540:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000544:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000548:	08000f8c 	.word	0x08000f8c
  ldr r2, =_sbss
 800054c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000550:	24000030 	.word	0x24000030

08000554 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <ADC3_IRQHandler>
	...

08000558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800055e:	2003      	movs	r0, #3
 8000560:	f000 f962 	bl	8000828 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000564:	f000 fb5c 	bl	8000c20 <HAL_RCC_GetSysClockFreq>
 8000568:	4602      	mov	r2, r0
 800056a:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <HAL_Init+0x68>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	0a1b      	lsrs	r3, r3, #8
 8000570:	f003 030f 	and.w	r3, r3, #15
 8000574:	4913      	ldr	r1, [pc, #76]	@ (80005c4 <HAL_Init+0x6c>)
 8000576:	5ccb      	ldrb	r3, [r1, r3]
 8000578:	f003 031f 	and.w	r3, r3, #31
 800057c:	fa22 f303 	lsr.w	r3, r2, r3
 8000580:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000582:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <HAL_Init+0x68>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	f003 030f 	and.w	r3, r3, #15
 800058a:	4a0e      	ldr	r2, [pc, #56]	@ (80005c4 <HAL_Init+0x6c>)
 800058c:	5cd3      	ldrb	r3, [r2, r3]
 800058e:	f003 031f 	and.w	r3, r3, #31
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	fa22 f303 	lsr.w	r3, r2, r3
 8000598:	4a0b      	ldr	r2, [pc, #44]	@ (80005c8 <HAL_Init+0x70>)
 800059a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800059c:	4a0b      	ldr	r2, [pc, #44]	@ (80005cc <HAL_Init+0x74>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005a2:	200f      	movs	r0, #15
 80005a4:	f000 f814 	bl	80005d0 <HAL_InitTick>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
 80005b0:	e002      	b.n	80005b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80005b2:	f7ff ff5d 	bl	8000470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	58024400 	.word	0x58024400
 80005c4:	08000f74 	.word	0x08000f74
 80005c8:	24000004 	.word	0x24000004
 80005cc:	24000000 	.word	0x24000000

080005d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80005d8:	4b15      	ldr	r3, [pc, #84]	@ (8000630 <HAL_InitTick+0x60>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d101      	bne.n	80005e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80005e0:	2301      	movs	r3, #1
 80005e2:	e021      	b.n	8000628 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80005e4:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <HAL_InitTick+0x64>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <HAL_InitTick+0x60>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4619      	mov	r1, r3
 80005ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f939 	bl	8000872 <HAL_SYSTICK_Config>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	e00e      	b.n	8000628 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b0f      	cmp	r3, #15
 800060e:	d80a      	bhi.n	8000626 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000610:	2200      	movs	r2, #0
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	f04f 30ff 	mov.w	r0, #4294967295
 8000618:	f000 f911 	bl	800083e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800061c:	4a06      	ldr	r2, [pc, #24]	@ (8000638 <HAL_InitTick+0x68>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000622:	2300      	movs	r3, #0
 8000624:	e000      	b.n	8000628 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2400000c 	.word	0x2400000c
 8000634:	24000000 	.word	0x24000000
 8000638:	24000008 	.word	0x24000008

0800063c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000640:	4b06      	ldr	r3, [pc, #24]	@ (800065c <HAL_IncTick+0x20>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <HAL_IncTick+0x24>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	4a04      	ldr	r2, [pc, #16]	@ (8000660 <HAL_IncTick+0x24>)
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	2400000c 	.word	0x2400000c
 8000660:	2400002c 	.word	0x2400002c

08000664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return uwTick;
 8000668:	4b03      	ldr	r3, [pc, #12]	@ (8000678 <HAL_GetTick+0x14>)
 800066a:	681b      	ldr	r3, [r3, #0]
}
 800066c:	4618      	mov	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	2400002c 	.word	0x2400002c

0800067c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000684:	f7ff ffee 	bl	8000664 <HAL_GetTick>
 8000688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000694:	d005      	beq.n	80006a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000696:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <HAL_Delay+0x44>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4413      	add	r3, r2
 80006a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006a2:	bf00      	nop
 80006a4:	f7ff ffde 	bl	8000664 <HAL_GetTick>
 80006a8:	4602      	mov	r2, r0
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d8f7      	bhi.n	80006a4 <HAL_Delay+0x28>
  {
  }
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2400000c 	.word	0x2400000c

080006c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <__NVIC_SetPriorityGrouping+0x40>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006e0:	4013      	ands	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006ee:	4313      	orrs	r3, r2
 80006f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f2:	4a04      	ldr	r2, [pc, #16]	@ (8000704 <__NVIC_SetPriorityGrouping+0x40>)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	60d3      	str	r3, [r2, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00
 8000708:	05fa0000 	.word	0x05fa0000

0800070c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000710:	4b04      	ldr	r3, [pc, #16]	@ (8000724 <__NVIC_GetPriorityGrouping+0x18>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	f003 0307 	and.w	r3, r3, #7
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db0a      	blt.n	8000752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	490c      	ldr	r1, [pc, #48]	@ (8000774 <__NVIC_SetPriority+0x4c>)
 8000742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000746:	0112      	lsls	r2, r2, #4
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	440b      	add	r3, r1
 800074c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000750:	e00a      	b.n	8000768 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4908      	ldr	r1, [pc, #32]	@ (8000778 <__NVIC_SetPriority+0x50>)
 8000758:	88fb      	ldrh	r3, [r7, #6]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	3b04      	subs	r3, #4
 8000760:	0112      	lsls	r2, r2, #4
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	440b      	add	r3, r1
 8000766:	761a      	strb	r2, [r3, #24]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077c:	b480      	push	{r7}
 800077e:	b089      	sub	sp, #36	@ 0x24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	f1c3 0307 	rsb	r3, r3, #7
 8000796:	2b04      	cmp	r3, #4
 8000798:	bf28      	it	cs
 800079a:	2304      	movcs	r3, #4
 800079c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3304      	adds	r3, #4
 80007a2:	2b06      	cmp	r3, #6
 80007a4:	d902      	bls.n	80007ac <NVIC_EncodePriority+0x30>
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3b03      	subs	r3, #3
 80007aa:	e000      	b.n	80007ae <NVIC_EncodePriority+0x32>
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	f04f 32ff 	mov.w	r2, #4294967295
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43da      	mvns	r2, r3
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	401a      	ands	r2, r3
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c4:	f04f 31ff 	mov.w	r1, #4294967295
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	43d9      	mvns	r1, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	4313      	orrs	r3, r2
         );
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3724      	adds	r7, #36	@ 0x24
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
	...

080007e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007f4:	d301      	bcc.n	80007fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00f      	b.n	800081a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000824 <SysTick_Config+0x40>)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000802:	210f      	movs	r1, #15
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	f7ff ff8e 	bl	8000728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <SysTick_Config+0x40>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000812:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <SysTick_Config+0x40>)
 8000814:	2207      	movs	r2, #7
 8000816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	e000e010 	.word	0xe000e010

08000828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff ff47 	bl	80006c4 <__NVIC_SetPriorityGrouping>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b086      	sub	sp, #24
 8000842:	af00      	add	r7, sp, #0
 8000844:	4603      	mov	r3, r0
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800084c:	f7ff ff5e 	bl	800070c <__NVIC_GetPriorityGrouping>
 8000850:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	68b9      	ldr	r1, [r7, #8]
 8000856:	6978      	ldr	r0, [r7, #20]
 8000858:	f7ff ff90 	bl	800077c <NVIC_EncodePriority>
 800085c:	4602      	mov	r2, r0
 800085e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff5f 	bl	8000728 <__NVIC_SetPriority>
}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ffb2 	bl	80007e4 <SysTick_Config>
 8000880:	4603      	mov	r3, r0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800088c:	b480      	push	{r7}
 800088e:	b089      	sub	sp, #36	@ 0x24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800089a:	4b89      	ldr	r3, [pc, #548]	@ (8000ac0 <HAL_GPIO_Init+0x234>)
 800089c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800089e:	e194      	b.n	8000bca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	2101      	movs	r1, #1
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 8186 	beq.w	8000bc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f003 0303 	and.w	r3, r3, #3
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d005      	beq.n	80008d0 <HAL_GPIO_Init+0x44>
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f003 0303 	and.w	r3, r3, #3
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d130      	bne.n	8000932 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2203      	movs	r2, #3
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4013      	ands	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68da      	ldr	r2, [r3, #12]
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000906:	2201      	movs	r2, #1
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43db      	mvns	r3, r3
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	4013      	ands	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	091b      	lsrs	r3, r3, #4
 800091c:	f003 0201 	and.w	r2, r3, #1
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	4313      	orrs	r3, r2
 800092a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f003 0303 	and.w	r3, r3, #3
 800093a:	2b03      	cmp	r3, #3
 800093c:	d017      	beq.n	800096e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	2203      	movs	r2, #3
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4013      	ands	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	689a      	ldr	r2, [r3, #8]
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4313      	orrs	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	2b02      	cmp	r3, #2
 8000978:	d123      	bne.n	80009c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	08da      	lsrs	r2, r3, #3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3208      	adds	r2, #8
 8000982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	220f      	movs	r2, #15
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	4013      	ands	r3, r2
 800099c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	691a      	ldr	r2, [r3, #16]
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	f003 0307 	and.w	r3, r3, #7
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	08da      	lsrs	r2, r3, #3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3208      	adds	r2, #8
 80009bc:	69b9      	ldr	r1, [r7, #24]
 80009be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	2203      	movs	r2, #3
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4013      	ands	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f003 0203 	and.w	r2, r3, #3
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f000 80e0 	beq.w	8000bc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a04:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac4 <HAL_GPIO_Init+0x238>)
 8000a06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a0a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ac4 <HAL_GPIO_Init+0x238>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a14:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac4 <HAL_GPIO_Init+0x238>)
 8000a16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a22:	4a29      	ldr	r2, [pc, #164]	@ (8000ac8 <HAL_GPIO_Init+0x23c>)
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	089b      	lsrs	r3, r3, #2
 8000a28:	3302      	adds	r3, #2
 8000a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	f003 0303 	and.w	r3, r3, #3
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	220f      	movs	r2, #15
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	4013      	ands	r3, r2
 8000a44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a20      	ldr	r2, [pc, #128]	@ (8000acc <HAL_GPIO_Init+0x240>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d052      	beq.n	8000af4 <HAL_GPIO_Init+0x268>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a1f      	ldr	r2, [pc, #124]	@ (8000ad0 <HAL_GPIO_Init+0x244>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d031      	beq.n	8000aba <HAL_GPIO_Init+0x22e>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad4 <HAL_GPIO_Init+0x248>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d02b      	beq.n	8000ab6 <HAL_GPIO_Init+0x22a>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad8 <HAL_GPIO_Init+0x24c>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d025      	beq.n	8000ab2 <HAL_GPIO_Init+0x226>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a1c      	ldr	r2, [pc, #112]	@ (8000adc <HAL_GPIO_Init+0x250>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d01f      	beq.n	8000aae <HAL_GPIO_Init+0x222>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae0 <HAL_GPIO_Init+0x254>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d019      	beq.n	8000aaa <HAL_GPIO_Init+0x21e>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a1a      	ldr	r2, [pc, #104]	@ (8000ae4 <HAL_GPIO_Init+0x258>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d013      	beq.n	8000aa6 <HAL_GPIO_Init+0x21a>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a19      	ldr	r2, [pc, #100]	@ (8000ae8 <HAL_GPIO_Init+0x25c>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d00d      	beq.n	8000aa2 <HAL_GPIO_Init+0x216>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a18      	ldr	r2, [pc, #96]	@ (8000aec <HAL_GPIO_Init+0x260>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d007      	beq.n	8000a9e <HAL_GPIO_Init+0x212>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a17      	ldr	r2, [pc, #92]	@ (8000af0 <HAL_GPIO_Init+0x264>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d101      	bne.n	8000a9a <HAL_GPIO_Init+0x20e>
 8000a96:	2309      	movs	r3, #9
 8000a98:	e02d      	b.n	8000af6 <HAL_GPIO_Init+0x26a>
 8000a9a:	230a      	movs	r3, #10
 8000a9c:	e02b      	b.n	8000af6 <HAL_GPIO_Init+0x26a>
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	e029      	b.n	8000af6 <HAL_GPIO_Init+0x26a>
 8000aa2:	2307      	movs	r3, #7
 8000aa4:	e027      	b.n	8000af6 <HAL_GPIO_Init+0x26a>
 8000aa6:	2306      	movs	r3, #6
 8000aa8:	e025      	b.n	8000af6 <HAL_GPIO_Init+0x26a>
 8000aaa:	2305      	movs	r3, #5
 8000aac:	e023      	b.n	8000af6 <HAL_GPIO_Init+0x26a>
 8000aae:	2304      	movs	r3, #4
 8000ab0:	e021      	b.n	8000af6 <HAL_GPIO_Init+0x26a>
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	e01f      	b.n	8000af6 <HAL_GPIO_Init+0x26a>
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e01d      	b.n	8000af6 <HAL_GPIO_Init+0x26a>
 8000aba:	2301      	movs	r3, #1
 8000abc:	e01b      	b.n	8000af6 <HAL_GPIO_Init+0x26a>
 8000abe:	bf00      	nop
 8000ac0:	58000080 	.word	0x58000080
 8000ac4:	58024400 	.word	0x58024400
 8000ac8:	58000400 	.word	0x58000400
 8000acc:	58020000 	.word	0x58020000
 8000ad0:	58020400 	.word	0x58020400
 8000ad4:	58020800 	.word	0x58020800
 8000ad8:	58020c00 	.word	0x58020c00
 8000adc:	58021000 	.word	0x58021000
 8000ae0:	58021400 	.word	0x58021400
 8000ae4:	58021800 	.word	0x58021800
 8000ae8:	58021c00 	.word	0x58021c00
 8000aec:	58022000 	.word	0x58022000
 8000af0:	58022400 	.word	0x58022400
 8000af4:	2300      	movs	r3, #0
 8000af6:	69fa      	ldr	r2, [r7, #28]
 8000af8:	f002 0203 	and.w	r2, r2, #3
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	4093      	lsls	r3, r2
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b06:	4938      	ldr	r1, [pc, #224]	@ (8000be8 <HAL_GPIO_Init+0x35c>)
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	4013      	ands	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000b32:	69ba      	ldr	r2, [r7, #24]
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000b3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	4013      	ands	r3, r2
 8000b52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000b68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d003      	beq.n	8000b94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	f47f ae63 	bne.w	80008a0 <HAL_GPIO_Init+0x14>
  }
}
 8000bda:	bf00      	nop
 8000bdc:	bf00      	nop
 8000bde:	3724      	adds	r7, #36	@ 0x24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	58000400 	.word	0x58000400

08000bec <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bfe:	887a      	ldrh	r2, [r7, #2]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4013      	ands	r3, r2
 8000c04:	041a      	lsls	r2, r3, #16
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	43d9      	mvns	r1, r3
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	400b      	ands	r3, r1
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	619a      	str	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	@ 0x24
 8000c24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c26:	4bb3      	ldr	r3, [pc, #716]	@ (8000ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000c28:	691b      	ldr	r3, [r3, #16]
 8000c2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000c2e:	2b18      	cmp	r3, #24
 8000c30:	f200 8155 	bhi.w	8000ede <HAL_RCC_GetSysClockFreq+0x2be>
 8000c34:	a201      	add	r2, pc, #4	@ (adr r2, 8000c3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8000c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3a:	bf00      	nop
 8000c3c:	08000ca1 	.word	0x08000ca1
 8000c40:	08000edf 	.word	0x08000edf
 8000c44:	08000edf 	.word	0x08000edf
 8000c48:	08000edf 	.word	0x08000edf
 8000c4c:	08000edf 	.word	0x08000edf
 8000c50:	08000edf 	.word	0x08000edf
 8000c54:	08000edf 	.word	0x08000edf
 8000c58:	08000edf 	.word	0x08000edf
 8000c5c:	08000cc7 	.word	0x08000cc7
 8000c60:	08000edf 	.word	0x08000edf
 8000c64:	08000edf 	.word	0x08000edf
 8000c68:	08000edf 	.word	0x08000edf
 8000c6c:	08000edf 	.word	0x08000edf
 8000c70:	08000edf 	.word	0x08000edf
 8000c74:	08000edf 	.word	0x08000edf
 8000c78:	08000edf 	.word	0x08000edf
 8000c7c:	08000ccd 	.word	0x08000ccd
 8000c80:	08000edf 	.word	0x08000edf
 8000c84:	08000edf 	.word	0x08000edf
 8000c88:	08000edf 	.word	0x08000edf
 8000c8c:	08000edf 	.word	0x08000edf
 8000c90:	08000edf 	.word	0x08000edf
 8000c94:	08000edf 	.word	0x08000edf
 8000c98:	08000edf 	.word	0x08000edf
 8000c9c:	08000cd3 	.word	0x08000cd3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000ca0:	4b94      	ldr	r3, [pc, #592]	@ (8000ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0320 	and.w	r3, r3, #32
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d009      	beq.n	8000cc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000cac:	4b91      	ldr	r3, [pc, #580]	@ (8000ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	4a90      	ldr	r2, [pc, #576]	@ (8000ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8000cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8000cbe:	e111      	b.n	8000ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8000cc0:	4b8d      	ldr	r3, [pc, #564]	@ (8000ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8000cc2:	61bb      	str	r3, [r7, #24]
      break;
 8000cc4:	e10e      	b.n	8000ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8000cc6:	4b8d      	ldr	r3, [pc, #564]	@ (8000efc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8000cc8:	61bb      	str	r3, [r7, #24]
      break;
 8000cca:	e10b      	b.n	8000ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8000ccc:	4b8c      	ldr	r3, [pc, #560]	@ (8000f00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8000cce:	61bb      	str	r3, [r7, #24]
      break;
 8000cd0:	e108      	b.n	8000ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000cd2:	4b88      	ldr	r3, [pc, #544]	@ (8000ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8000cdc:	4b85      	ldr	r3, [pc, #532]	@ (8000ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ce0:	091b      	lsrs	r3, r3, #4
 8000ce2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ce6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8000ce8:	4b82      	ldr	r3, [pc, #520]	@ (8000ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8000cf2:	4b80      	ldr	r3, [pc, #512]	@ (8000ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	fb02 f303 	mul.w	r3, r2, r3
 8000d02:	ee07 3a90 	vmov	s15, r3
 8000d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d0a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f000 80e1 	beq.w	8000ed8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	f000 8083 	beq.w	8000e24 <HAL_RCC_GetSysClockFreq+0x204>
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	f200 80a1 	bhi.w	8000e68 <HAL_RCC_GetSysClockFreq+0x248>
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <HAL_RCC_GetSysClockFreq+0x114>
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d056      	beq.n	8000de0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8000d32:	e099      	b.n	8000e68 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000d34:	4b6f      	ldr	r3, [pc, #444]	@ (8000ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0320 	and.w	r3, r3, #32
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d02d      	beq.n	8000d9c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8000d40:	4b6c      	ldr	r3, [pc, #432]	@ (8000ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	08db      	lsrs	r3, r3, #3
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	4a6b      	ldr	r2, [pc, #428]	@ (8000ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8000d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d50:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	ee07 3a90 	vmov	s15, r3
 8000d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	ee07 3a90 	vmov	s15, r3
 8000d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d6a:	4b62      	ldr	r3, [pc, #392]	@ (8000ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d72:	ee07 3a90 	vmov	s15, r3
 8000d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000d7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8000d7e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8000f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8000d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d96:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8000d9a:	e087      	b.n	8000eac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	ee07 3a90 	vmov	s15, r3
 8000da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8000f08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8000daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000dae:	4b51      	ldr	r3, [pc, #324]	@ (8000ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000db6:	ee07 3a90 	vmov	s15, r3
 8000dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8000dc2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8000f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8000dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8000dde:	e065      	b.n	8000eac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	ee07 3a90 	vmov	s15, r3
 8000de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8000f0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8000dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000df2:	4b40      	ldr	r3, [pc, #256]	@ (8000ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000e02:	ed97 6a02 	vldr	s12, [r7, #8]
 8000e06:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8000f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8000e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8000e22:	e043      	b.n	8000eac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	ee07 3a90 	vmov	s15, r3
 8000e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e2e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8000f10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8000e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e36:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e3e:	ee07 3a90 	vmov	s15, r3
 8000e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8000e4a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8000f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8000e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8000e66:	e021      	b.n	8000eac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	ee07 3a90 	vmov	s15, r3
 8000e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e72:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8000f0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8000e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e82:	ee07 3a90 	vmov	s15, r3
 8000e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8000e8e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8000f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8000e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8000eaa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8000eac:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb0:	0a5b      	lsrs	r3, r3, #9
 8000eb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	ee07 3a90 	vmov	s15, r3
 8000ec0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ec4:	edd7 6a07 	vldr	s13, [r7, #28]
 8000ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ed0:	ee17 3a90 	vmov	r3, s15
 8000ed4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8000ed6:	e005      	b.n	8000ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
      break;
 8000edc:	e002      	b.n	8000ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8000ede:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8000ee0:	61bb      	str	r3, [r7, #24]
      break;
 8000ee2:	bf00      	nop
  }

  return sysclockfreq;
 8000ee4:	69bb      	ldr	r3, [r7, #24]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	@ 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	58024400 	.word	0x58024400
 8000ef8:	03d09000 	.word	0x03d09000
 8000efc:	003d0900 	.word	0x003d0900
 8000f00:	017d7840 	.word	0x017d7840
 8000f04:	46000000 	.word	0x46000000
 8000f08:	4c742400 	.word	0x4c742400
 8000f0c:	4a742400 	.word	0x4a742400
 8000f10:	4bbebc20 	.word	0x4bbebc20

08000f14 <__libc_init_array>:
 8000f14:	b570      	push	{r4, r5, r6, lr}
 8000f16:	4d0d      	ldr	r5, [pc, #52]	@ (8000f4c <__libc_init_array+0x38>)
 8000f18:	4c0d      	ldr	r4, [pc, #52]	@ (8000f50 <__libc_init_array+0x3c>)
 8000f1a:	1b64      	subs	r4, r4, r5
 8000f1c:	10a4      	asrs	r4, r4, #2
 8000f1e:	2600      	movs	r6, #0
 8000f20:	42a6      	cmp	r6, r4
 8000f22:	d109      	bne.n	8000f38 <__libc_init_array+0x24>
 8000f24:	4d0b      	ldr	r5, [pc, #44]	@ (8000f54 <__libc_init_array+0x40>)
 8000f26:	4c0c      	ldr	r4, [pc, #48]	@ (8000f58 <__libc_init_array+0x44>)
 8000f28:	f000 f818 	bl	8000f5c <_init>
 8000f2c:	1b64      	subs	r4, r4, r5
 8000f2e:	10a4      	asrs	r4, r4, #2
 8000f30:	2600      	movs	r6, #0
 8000f32:	42a6      	cmp	r6, r4
 8000f34:	d105      	bne.n	8000f42 <__libc_init_array+0x2e>
 8000f36:	bd70      	pop	{r4, r5, r6, pc}
 8000f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f3c:	4798      	blx	r3
 8000f3e:	3601      	adds	r6, #1
 8000f40:	e7ee      	b.n	8000f20 <__libc_init_array+0xc>
 8000f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f46:	4798      	blx	r3
 8000f48:	3601      	adds	r6, #1
 8000f4a:	e7f2      	b.n	8000f32 <__libc_init_array+0x1e>
 8000f4c:	08000f84 	.word	0x08000f84
 8000f50:	08000f84 	.word	0x08000f84
 8000f54:	08000f84 	.word	0x08000f84
 8000f58:	08000f88 	.word	0x08000f88

08000f5c <_init>:
 8000f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5e:	bf00      	nop
 8000f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f62:	bc08      	pop	{r3}
 8000f64:	469e      	mov	lr, r3
 8000f66:	4770      	bx	lr

08000f68 <_fini>:
 8000f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6a:	bf00      	nop
 8000f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f6e:	bc08      	pop	{r3}
 8000f70:	469e      	mov	lr, r3
 8000f72:	4770      	bx	lr
